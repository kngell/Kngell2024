# Optimized zsh configuration with safe powerlevel10k setup
# This configuration is designed to avoid hanging issues

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Fix locale issues
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

# Path to your Oh My Zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set theme to powerlevel10k
ZSH_THEME="powerlevel10k/powerlevel10k"

# Disable auto-update prompts (can cause hangs)
zstyle ':omz:update' mode disabled

# Disable marking untracked files under VCS as dirty (improves performance)
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Enable command auto-correction
ENABLE_CORRECTION="true"

# Display red dots whilst waiting for completion
COMPLETION_WAITING_DOTS="true"

# Disable bi-weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Plugins - carefully selected for stability
plugins=(
    git
    zsh-syntax-highlighting
    zsh-autosuggestions
)

# Source Oh My Zsh with error handling
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
    source $ZSH/oh-my-zsh.sh
else
    echo "Warning: Oh My Zsh not found at $ZSH"
    # Fallback to simple prompt
    PROMPT='%n@%m:%~$ '
fi

# User configuration
export EDITOR='vim'
export PAGER='less'

# History configuration
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE

# Directory navigation
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT

# Completion
setopt COMPLETE_ALIASES
setopt ALWAYS_TO_END
setopt AUTO_MENU
setopt AUTO_LIST
setopt AUTO_PARAM_SLASH
setopt COMPLETE_IN_WORD

# Aliases
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'

# Safety aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# NVM configuration (lazy-loaded for performance)
export NVM_DIR="$HOME/.nvm"

# Function to lazy-load NVM
load_nvm() {
  if [ -s "$NVM_DIR/nvm.sh" ]; then
    source "$NVM_DIR/nvm.sh"
  fi
  if [ -s "$NVM_DIR/bash_completion" ]; then
    source "$NVM_DIR/bash_completion"
  fi
}

# Create aliases that will load NVM when first used
nvm() {
  unset -f nvm node npm npx
  load_nvm
  nvm "$@"
}

node() {
  unset -f nvm node npm npx
  load_nvm
  node "$@"
}

npm() {
  unset -f nvm node npm npx
  load_nvm
  npm "$@"
}

npx() {
  unset -f nvm node npm npx
  load_nvm
  npx "$@"
}

# Custom functions
# Extract various archive formats
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Find process by name
psgrep() {
    ps aux | grep -v grep | grep "$@" -i --color=auto
}

# Kill process by name
killps() {
    local pid
    pid=$(ps -ax | grep "$1" | grep -v grep | awk '{ print $1 }')
    echo -n "killing $1 (process $pid)..."
    kill -9 $pid
    echo "slaughtered."
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Safety: If powerlevel10k fails to load, use a simple prompt
if [[ -z "$POWERLEVEL9K_MODE" && -z "$POWERLEVEL10K_MODE" ]]; then
    PROMPT='%n@%m:%~$ '
    echo "Warning: Powerlevel10k not loaded, using fallback prompt"
fi

# Welcome message
echo "Zsh loaded successfully with optimized configuration!"